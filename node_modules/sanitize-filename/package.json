{
  "_args": [
    [
      {
        "raw": "sanitize-filename",
        "scope": null,
        "escapedName": "sanitize-filename",
        "name": "sanitize-filename",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/benjamincoriou/Documents/HTTP/foodradar"
    ]
  ],
  "_from": "sanitize-filename@latest",
  "_id": "sanitize-filename@1.6.1",
  "_inCache": true,
  "_location": "/sanitize-filename",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/sanitize-filename-1.6.1.tgz_1475171189008_0.9685693806968629"
  },
  "_npmUser": {
    "name": "parshap",
    "email": "parshap+npm@gmail.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sanitize-filename",
    "scope": null,
    "escapedName": "sanitize-filename",
    "name": "sanitize-filename",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/sanitize-filename/-/sanitize-filename-1.6.1.tgz",
  "_shasum": "612da1c96473fa02dccda92dcd5b4ab164a6772a",
  "_shrinkwrap": null,
  "_spec": "sanitize-filename",
  "_where": "/Users/benjamincoriou/Documents/HTTP/foodradar",
  "author": {
    "name": "Parsha Pourkhomami"
  },
  "bugs": {
    "url": "https://github.com/parshap/node-sanitize-filename/issues"
  },
  "contributors": [
    {
      "name": "Parsha Pourkhomami",
      "email": "parshap@gmail.com"
    },
    {
      "name": "Joel Mukuthu",
      "email": "joelmukuthu@gmail.com"
    }
  ],
  "dependencies": {
    "truncate-utf8-bytes": "^1.0.0"
  },
  "description": "Sanitize a string for use as a filename",
  "devDependencies": {
    "browserify": "^13.0.0",
    "concat-stream": "^1.5.1",
    "mktemp": "^0.4.0",
    "tape": "^4.2.2",
    "zuul": "^3.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "612da1c96473fa02dccda92dcd5b4ab164a6772a",
    "tarball": "https://registry.npmjs.org/sanitize-filename/-/sanitize-filename-1.6.1.tgz"
  },
  "gitHead": "ef1e8ad58e95eb90f8a01f209edf55cd4176e9c8",
  "homepage": "https://github.com/parshap/node-sanitize-filename#readme",
  "keywords": [
    "file",
    "name",
    "filename",
    "sanitize",
    "validate",
    "escape"
  ],
  "license": "WTFPL OR ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "parshap",
      "email": "supster+npm@gmail.com"
    }
  ],
  "name": "sanitize-filename",
  "optionalDependencies": {},
  "readme": "# sanitize-filename [![build status](https://secure.travis-ci.org/parshap/node-sanitize-filename.svg?branch=master)](http://travis-ci.org/parshap/node-sanitize-filename)\n\nSanitize a string to be safe for use as a filename by removing directory\npaths and invalid characters.\n\n## Install\n\n[npm: *sanitize-filename*](https://www.npmjs.com/package/sanitize-filename)\n\n```\nnpm install sanitize-filename\n```\n\n## Example\n\n```js\nvar sanitize = require(\"sanitize-filename\");\n\n// Some string that may be unsafe or invalid as a filename\nvar UNSAFE_USER_INPUT = \"~/.\\u0000ssh/authorized_keys\";\n\n// Sanitize the string to be safe for use as a filename.\nvar filename = sanitize(UNSAFE_USER_INPUT);\n// -> \"~.sshauthorized_keys\"\n```\n\n## Details\n\n*sanitize-filename* removes the following:\n\n * [Control characters][] (`0x00`–`0x1f` and `0x80`–`0x9f`)\n * [Reserved characters][] (`/`, `?`, `<`, `>`, `\\`, `:`, `*`, `|`, and\n   `\"`)\n * Unix reserved filenames (`.` and `..`)\n * Trailing periods and spaces ([for Windows][windows trailing])\n * Windows reserved filenames (`CON`, `PRN`, `AUX`, `NUL`, `COM1`,\n   `COM2`, `COM3`, `COM4`, `COM5`, `COM6`, `COM7`, `COM8`, `COM9`,\n   `LPT1`, `LPT2`, `LPT3`, `LPT4`, `LPT5`, `LPT6`, `LPT7`, `LPT8`, and\n   `LPT9`)\n\n[control characters]: https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n[reserved characters]: https://kb.acronis.com/content/39790\n[windows trailing]: https://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx#Naming_Conventions\n\nThe resulting string is truncated to [255 bytes in length][255]. The\nstring will not contain any directory paths and will be safe to use as a\nfilename.\n\n[255]: http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n\n### Empty String `\"\"` Result\n\nAn empty string `\"\"` can be returned. For example:\n\n```js\nvar sanitize = require(\"sanitize-filename\");\nsanitize(\"..\")\n// -> \"\"\n\n```\n\n### Non-unique Filenames\n\nTwo different inputs can return the same value. For example:\n\n```js\nvar sanitize = require(\"sanitize-filename\");\nsanitize(\"file?\")\n// -> \"file\"\nsanitize (\"*file*\")\n// -> \"file\"\n```\n\n### File Systems\n\nSanitized filenames will be safe for use on modern Windows, OS X, and\nUnix file systems (`NTFS`, `ext`, etc.).\n\n[`FAT` 8.3 filenames][8.3] are not supported.\n\n[8.3]: https://en.wikipedia.org/wiki/8.3_filename\n\n#### Test Your File System\n\nThe test program will use various strings (including the [Big List of\nNaughty Strings][blns]) to create files in the working directory. Run\n`npm test` to run tests against your file system.\n\n[blns]: https://github.com/minimaxir/big-list-of-naughty-strings\n\n## API\n\n### `sanitize(inputString, [options])`\n\nSanitize `inputString` by removing or replacing invalid characters.\n\nOptions:\n\n * `options.replacement`: A string to replace invalid characters with.\n   *Optional. Default: `\"\"`.*\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/parshap/node-sanitize-filename.git"
  },
  "scripts": {
    "test": "tape test.js",
    "test-browser": "zuul --local --open -- test.js",
    "test-browser-sauce": "zuul -- test.js"
  },
  "version": "1.6.1"
}
