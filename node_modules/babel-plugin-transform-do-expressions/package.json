{
  "_args": [
    [
      {
        "raw": "babel-plugin-transform-do-expressions@^6.22.0",
        "scope": null,
        "escapedName": "babel-plugin-transform-do-expressions",
        "name": "babel-plugin-transform-do-expressions",
        "rawSpec": "^6.22.0",
        "spec": ">=6.22.0 <7.0.0",
        "type": "range"
      },
      "/Users/benjamincoriou/Documents/HTTP/foodradar/node_modules/babel-preset-stage-0"
    ]
  ],
  "_from": "babel-plugin-transform-do-expressions@>=6.22.0 <7.0.0",
  "_id": "babel-plugin-transform-do-expressions@6.22.0",
  "_inCache": true,
  "_location": "/babel-plugin-transform-do-expressions",
  "_nodeVersion": "6.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/babel-plugin-transform-do-expressions-6.22.0.tgz_1484872427362_0.7200989469420165"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-transform-do-expressions@^6.22.0",
    "scope": null,
    "escapedName": "babel-plugin-transform-do-expressions",
    "name": "babel-plugin-transform-do-expressions",
    "rawSpec": "^6.22.0",
    "spec": ">=6.22.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/babel-preset-stage-0"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-transform-do-expressions/-/babel-plugin-transform-do-expressions-6.22.0.tgz",
  "_shasum": "28ccaf92812d949c2cd1281f690c8fdc468ae9bb",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-transform-do-expressions@^6.22.0",
  "_where": "/Users/benjamincoriou/Documents/HTTP/foodradar/node_modules/babel-preset-stage-0",
  "dependencies": {
    "babel-plugin-syntax-do-expressions": "^6.8.0",
    "babel-runtime": "^6.22.0"
  },
  "description": "Compile do expressions to ES5",
  "devDependencies": {
    "babel-helper-plugin-test-runner": "^6.22.0"
  },
  "directories": {},
  "dist": {
    "shasum": "28ccaf92812d949c2cd1281f690c8fdc468ae9bb",
    "tarball": "https://registry.npmjs.org/babel-plugin-transform-do-expressions/-/babel-plugin-transform-do-expressions-6.22.0.tgz"
  },
  "keywords": [
    "babel-plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "amasad",
      "email": "amjad.masad@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "jmm",
      "email": "npm-public@jessemccarthy.net"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "sebmck",
      "email": "sebmck@gmail.com"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    }
  ],
  "name": "babel-plugin-transform-do-expressions",
  "optionalDependencies": {},
  "readme": "# babel-plugin-transform-do-expressions\n\n> Compile `do` expressions to ES5\n\n## Detail\n\n> The `do { .. }` expression executes a block (with one or many statements in it), and the final statement completion value inside the block becomes the completion value of the do expression.\n\nfrom [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md#statement-completion-values)\n\nIt can be seen as a complex version of the [ternary operator](http://mdn.io/ternary):\n\n```js\nlet a = do {\n  if(x > 10) {\n    'big';\n  } else {\n    'small';\n  }\n};\n// is equivalent to:\nlet a = x > 10 ? 'big' : 'small';\n```\n\n[Try in REPL](http://babeljs.io/repl/#?evaluate=true&presets=es2015%2Cstage-0&code=%0Alet%20x%20%3D%20100%3B%0A%0Alet%20a%20%3D%20do%20%7B%0A%20%20if(x%20%3E%2010)%20%7B%0A%20%20%20%20'big'%3B%0A%20%20%7D%20else%20%7B%0A%20%20%20%20'small'%3B%0A%20%20%7D%0A%7D%3B%0A%0Aconsole.log(a)%3B)\n\nThis example is not the best usage because it is too simple and using a ternary operator is a better option but you can have a much more complex condition in the `do { ... }` expression with several `if ... else` chains:\n\n```js\nlet x = 100;\nlet y = 20;\n\nlet a = do {\n  if(x > 10) {\n    if(y > 20) {\n      'big x, big y';\n    } else {\n      'big x, small y';\n    }\n  } else {\n    if(y > 10) {\n      'small x, big y';\n    } else {\n      'small x, small y';\n    }\n  }\n};\n```\n\n[Try in REPL](http://babeljs.io/repl/#?evaluate=true&presets=es2015%2Cstage-0&code=let%20x%20%3D%20100%3B%0Alet%20y%20%3D%2020%3B%0A%0Alet%20a%20%3D%20do%20%7B%0A%20%20if(x%20%3E%2010)%20%7B%0A%20%20%20%20if(y%20%3E%2020)%20%7B%0A%20%20%20%20%20%20'big%20x%2C%20big%20y'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20'big%20x%2C%20small%20y'%3B%0A%20%20%20%20%7D%0A%20%20%7D%20else%20%7B%0A%20%20%20%20if(y%20%3E%2010)%20%7B%0A%20%20%20%20%20%20'small%20x%2C%20big%20y'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20'small%20x%2C%20small%20y'%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%3B%0A%0Aconsole.log(a)%3B)\n\n## Example\n\n### In JSX\nOne of the most useful usage of the `do` expression is inside JSX. If we want to conditionally display a component we usually have to call another function which would implement the condition and return the correct value, for example:\n\n```js\nconst getColoredComponent = color => {\n  if(color === 'blue') { return <BlueComponent/>; }\n  if(color === 'red') { return <RedComponent/>; }\n  if(color === 'green') { return <GreenComponent/>; }\n}\n\nconst Component = props =>\n  <div className='myComponent'>\n    {getColoredComponent()}\n  </div>\n;\n```\n\nUsing a do expression you can add logic inside JSX:\n\n```js\nconst Component = props =>\n  <div className='myComponent'>\n    {do {\n      if(color === 'blue') { <BlueComponent/>; }\n      if(color === 'red') { <RedComponent/>; }\n      if(color === 'green') { <GreenComponent/>; }\n    }}\n  </div>\n;\n```\n\n[Try in REPL](http://babeljs.io/repl/#?evaluate=true&presets=es2015%2Creact%2Cstage-0&code=const%20Component%20%3D%20props%20%3D%3E%0A%20%20%3Cdiv%20className%3D'myComponent'%3E%0A%20%20%20%20%7Bdo%20%7B%0A%20%20%20%20%20%20if(color%20%3D%3D%3D%20'blue')%20%7B%20%3CBlueComponent%2F%3E%3B%20%7D%0A%20%20%20%20%20%20if(color%20%3D%3D%3D%20'red')%20%7B%20%3CRedComponent%2F%3E%3B%20%7D%0A%20%20%20%20%20%20if(color%20%3D%3D%3D%20'green')%20%7B%20%3CGreenComponent%2F%3E%3B%20%7D%0A%20%20%20%20%7D%7D%0A%20%20%3C%2Fdiv%3E%0A%3B)\n\n## Installation\n\n```sh\nnpm install --save-dev babel-plugin-transform-do-expressions\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"transform-do-expressions\"]\n}\n```\n\n### Via CLI\n\n```sh\nbabel --plugins transform-do-expressions script.js\n```\n\n### Via Node API\n\n```javascript\nrequire(\"babel-core\").transform(\"code\", {\n  plugins: [\"transform-do-expressions\"]\n});\n```\n\n## References\n- [Proposal](http://wiki.ecmascript.org/doku.php?id=strawman:do_expressions)\n- [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md#statement-completion-values)\n- Very handy for conditions inside JSX: [reactjs/react-future#35](https://github.com/reactjs/react-future/issues/35#issuecomment-120009203)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-do-expressions"
  },
  "scripts": {},
  "version": "6.22.0"
}
